{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/Footer.js","Gif_expert_app.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","className","placeholder","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","meta","status","gifs","map","images","id","title","img","downsized_medium","console","error","GifGridItem","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","Footer","GifExpertApp","setCategorie","categ","ReactDOM","render","document","getElementById"],"mappings":"8LAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OAEI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAU,OAAGP,GAAH,mBAAiBO,OACzCN,EAAc,MAMaO,UAAU,SAAzC,SACE,uBACGC,YAAY,aACZC,KAAK,OACLC,MAAOX,EACPY,SAnBiB,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,sEAGTC,EAHS,iDAGwCC,UAAUH,GAHlD,+DAKII,MAAMF,GALV,cAKTG,EALS,gBAMaA,EAAKC,OANlB,mBAMRC,EANQ,EAMRA,KAGY,MATJ,EAMDC,KAGNC,OATO,wBAWNC,EAAOH,EAAKI,KAAI,YAAsB,IAApBC,EAAmB,EAAnBA,OAAOC,EAAY,EAAZA,GAAGC,EAAS,EAATA,MAC7B,MAAO,CACHD,KACAE,IAAKH,EAAOI,iBAAiBd,IAC7BY,YAfG,kBAmBLJ,GAnBK,0DA0BfO,QAAQC,MAAR,MA1Be,0DAAH,sDCEPC,EAAc,SAAC,GAAmB,EAAlBN,GAAmB,IAAhBE,EAAe,EAAfA,IAAID,EAAW,EAAXA,MAChC,OACG,sBAAKrB,UAAU,QAAf,UAEI,qBAAM2B,IAAKL,EAAKM,IAAKP,IACrB,4BAAIA,QCJFQ,EAAU,SAAC,GAAgB,IAAftB,EAAc,EAAdA,SAErB,ECEwB,SAACA,GAEzB,MAA0BhB,mBAAS,CAC/BuB,KAAK,GACLgB,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAdAC,qBAAU,WACN3B,EAAQC,GAAU2B,MAAK,SAAAC,GAEnBH,EAAS,CACLlB,KAAKqB,EACPL,SAAQ,SAKhB,CAACvB,IAIIwB,EDtBgBK,CAAa7B,GAA7BuB,EAAP,EAAOA,QAAQhB,EAAf,EAAeA,KAEf,OACI,qCACE,6BAAKP,IACDuB,GAAW,mBAAG9B,UAAU,SAAb,wBACf,qBAAKA,UAAU,YAAf,SAEQc,EAAKI,KAAI,SAAAI,GACN,OAAO,cAAC,EAAD,eAEFA,GADCA,EAAIF,aEblBiB,EAAS,WAClB,OACI,wBAAQrC,UAAU,SAAlB,iECCKsC,EAAe,WAExB,MAAmC/C,mBAAS,CAAC,cAA7C,mBAAOQ,EAAP,KAAmBwC,EAAnB,KAIA,OACI,qCACA,oBAAIvC,UAAU,SAAd,4BACA,uBACA,cAAC,EAAD,CAAaV,cAAeiD,IAC5B,6BAKIxC,EAAWmB,KAAI,SAACsB,GAAD,OAAU,cAAC,EAAD,CAAqBjC,SAAUiC,GAAjBA,QAI3C,cAAC,EAAD,Q,YCpBRC,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.091ee473.chunk.js","sourcesContent":["import React ,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value)\r\n    }\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault()\r\n        if(inputValue.trim().length > 1){\r\n\r\n            setCategories(categories=>[inputValue,...categories])\r\n            setInputValue('')\r\n        }\r\n    }\r\n   \r\n    return (\r\n\r\n        <form onSubmit ={handleSubmit} className=\"center\">\r\n          <input \r\n             placeholder=\"Hello word\"\r\n             type=\"text\"\r\n             value={inputValue}\r\n             onChange={handleInputChange}\r\n\r\n          />\r\n          </form>\r\n       \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async(category)=>{\r\n\r\n    try{\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category )}&api_key=UIu9Y60JBJMJggRmYEbpqjWDiVcXoTTv&limit=10`\r\n\r\n        const resp = await fetch(url);\r\n        const {data , meta} = await resp.json()\r\n\r\n\r\n        if(meta.status === 200){\r\n    \r\n           const gifs = data.map(({images,id,title})=>{\r\n                return {\r\n                    id ,\r\n                    img: images.downsized_medium.url ,\r\n                    title \r\n                    \r\n                }\r\n            })\r\n           return gifs\r\n\r\n          \r\n\r\n\r\n        }\r\n    }catch(e){\r\n        console.error(e)\r\n    }\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,img,title}) => {\r\n    return (\r\n       <div className=\"card \">\r\n           \r\n           <img  src={img} alt={title} />\r\n           <p>{title}</p>\r\n           \r\n       </div>\r\n    )\r\n}\r\n","import { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({category}) => {\r\n    // custom hook\r\n    const {loading,data} = useFetchGifs(category)\r\n\r\n    return (\r\n        <>\r\n          <h3>{category}</h3> \r\n             {loading && <p className=\"center\">loading...</p>}\r\n          <div className=\"card-grid\">\r\n              {\r\n                  data.map(img=>{\r\n                     return <GifGridItem\r\n                      key={img.id}\r\n                      {...img}\r\n\r\n                     />\r\n                  })\r\n              }\r\n          </div>\r\n        </>\r\n    )\r\n}\r\n","import  {useState,useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGif'\r\n\r\n\r\n\r\n// primer hook\r\n// los hooks no son mas que funciones\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n    useEffect(() =>{\r\n        getGifs(category).then(imgs=>{\r\n\r\n            setstate({\r\n                data:imgs,\r\n              loading:false\r\n            })\r\n        }\r\n           )\r\n       \r\n    },[category])\r\n\r\n\r\n\r\n    return state\r\n}\r\n","import React from 'react'\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <footer className=\"center\">\r\n            All rights reserved Â© 2021 Dijevic development.\r\n        </footer>\r\n    )\r\n}\r\n","import React , {useState} from 'react';\r\nimport {AddCategory} from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\nimport { Footer } from './components/Footer';\r\n\r\nexport const GifExpertApp = ()=>{\r\n    // no olvidar que al setear un estado , no modificarlo directamente, y setarlo en la parte del html a cambiar con el nombre del estado\r\n    const [categories, setCategorie] = useState(['one punch'])\r\n\r\n \r\n\r\n    return( \r\n        <>\r\n        <h1 className=\"center\">Gif expert APP</h1>\r\n        <hr />\r\n        <AddCategory setCategories={setCategorie}/>\r\n        <ol>\r\n            {/* no olvidar agregar los corchetes para usar js inside html */}\r\n        {\r\n        \r\n        \r\n            categories.map((categ) =><GifGrid key={categ} category={categ}/>)\r\n        \r\n        }\r\n        </ol>\r\n        <Footer/>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './Gif_expert_app';\nimport './index.css';\nimport './animate.css'\nReactDOM.render(\n    <GifExpertApp />,\n    \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}